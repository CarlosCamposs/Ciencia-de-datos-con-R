tinytex::install_tinytex()
library(nycflights13)
library(tidyverse)
library(knitr)
library(moderndive)
library(scales) # Sirve para escalas temporales (eje x)
library(zoo)
head(sismos_enero[,-c(7)],4)
? glimpse
# ///////////////////////////////////////////////////////////////////////////
# Sesion 13 - Ciencia de datos con R
library(nycflights13)
library(tidyverse)
library(knitr)
library(moderndive)
library(scales)
library(zoo)
##########
# Cargamos los datos
setwd("C:/Users/Carlos Daniel/Desktop/GitHub/Ciencia-de-datos-con-R/datasets")
# Otros verbos
# ------------------------------------------------------------------------------
# select()
# Permite seleccionar columnas, cuando queremos trabjar solo con algunas columnas
flights %>%
select(carrier,flight)
# 1. Me muestra el dataframe con esolo esas dos columnas
### Se puede usar select para quitar informacion
flights %>%
select(-year) %>% View()
# 1. Quitamos la variable "year", puesto que a priori sabemos que esta tbala
#    tiene datos del 2013 nada mas
# 2. En caso de no querer columnas, se puede poner un vector c() para quitar varias
### Se pueden seleccionar un rango de celdas con ":"
flights %>%
select(month:day,arr_time:arr_delay) %>% names()
### Se puede establecer el orden en que aparecen las variables
flights %>%
select(year:day,hour,minute,time_hour,everything()) %>% View()
# Establecemos que orden queremos algunas y para todas las demas usamos everything()
### Podemos buscar variables (columnas) que cumplan ciertas condiciones:
# Palabras que empiecen con ~
flights %>% select(starts_with(("a"))) %>% names()
# Palabras que terminen con ~
flights %>% select(ends_with("e")) %>% names()
# Palabras que contienen ~ en cualquier parte de la variable
flights %>% select(contains("time")) %>% names()
# ------------------------------------------------------------------------------
# rename(): cambia el nombre de las columnas
flights %>%
select(dep_time,arr_time) %>%
rename("departure_time"=dep_time,
"arrival_time"=arr_time) %>% names()
# 1. Nuevo nombre = viejo nombre
# Se puede omitir rename(), con select() se puede hacer lo mismo
flights %>% select("departure_time"=dep_time,
"arrival_time"=arr_time) %>% names()
# ------------------------------------------------------------------------------
# top_n(): devuelve los primeros "n" valores de una variable
library(nycflights13)
named_dests <-  flights %>%
group_by(dest) %>%
summarise(num_flights=n()) %>%
inner_join(airports[,c("faa","name")],by=c("dest"="faa")) %>%
top_n(10,wt=num_flights)
named_dests
# 1. "wt" se lee como "con respecto a "
# 2. No los ordena, solo muestra los primeros 10
# Para comparar dos dataframes "dataframe1 == dataframe2"
# ------------------------------------------------------------------------------
# distintc(): sirve para eliminar repeticiones
flights %>% n_distinct()
# 1. Muestra 336,776, son los registros que son distintos entre si
mi_data <- data.frame("col1"=c("Luis","Ana","Luis"),
"col2"=c("H","M","H"),
"col3"=c(12,13,12))
mi_data %>% distinct()
# 1. Devuelve los registros que son diferentes
# ------------------------------------------------------------------------------
# n_distinct(): sirve para contar
mi_data_2 <- data.frame("col1"=c("Luis","Ana","Luis"),
"col2"=c("H","M","H"),
"col3"=c(12,13,10))
mi_data_2 %>%
group_by(col1) %>%
summarise(conteo=n_distinct(col3))
# 1. Cuantos valores diferentes tiene "col1
# ------------------------------------------------------------------------------
# 4:30 - Ejercicio
# ------------------------------------------------------------------------------
# select()
# select(-c())
# select( columna1:columna4, columna6:columna8 )
# argumento: everything() para poner el resto de variables
#            starts_with("~") muestra las variables que empiecen co ~
#            ends_with()
#            contains()
# rename()
# top_n()
# distinct()
# n_distinct()
### Podemos buscar variables (columnas) que cumplan ciertas condiciones:
# Palabras que empiecen con ~
flights %>% select(starts_with(("a"))) %>% names()
### Podemos buscar variables (columnas) que cumplan ciertas condiciones:
# Palabras que empiecen con ~
flights %>% select(starts_with("a")) %>% names()
